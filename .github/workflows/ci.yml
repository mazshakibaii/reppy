name: CI

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  discussions: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD^1
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Node and pnpm
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      # Install and Build
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm build

      # Create npmrc file
      - name: Create .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc

      # Publish
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm publish --no-git-checks

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
